# deploy.yml

# GitHub Actions 워크플로우의 이름
name: deploy

# 워크플로우를 언제 실행할지 지정
on:
  pull_request:
    branches:
      - dev
#      - main

# 권한 설정
permissions:
  contents: read

# Jobs 정의
jobs:

  # AWS 컨테이너 레지스트리로 푸시하는 작업
  push_to_registry:
    name: Push to AWS Container Registry
    runs-on: ubuntu-latest

    # 작업 단계 정의
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build --stacktrace
        shell: bash

      # Docker 이미지 빌드
      - name: Docker build
        if: contains(github.ref, 'dev') || contains(github.ref, 'main')
        # Docker 이미지 빌드 및 태그 # Docker 이미지 푸시
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t moayoeats -f ./infra/Dockerfile .
          docker tag moayoeats:latest ${{ secrets.DOCKER_USER }}/moayoeats:latest
          docker push ${{ secrets.DOCKER_USER }}/moayoeats:latest

  # AWS 컨테이너 레지스트리에서 서버로 풀하는 작업
  pull_from_registry:
    name: Connect server SSH and pull from Container Registry
    needs: push_to_registry
    runs-on: ubuntu-latest

    # 작업 단계 정의
    steps:
      - name: Get GitHub Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Setting environment variables
        run: |
          echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
          echo "AWS_SG_NAME=launch-wizard-1" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: ap-northeast-2

      - name: Add GitHub Actions IP to Security group
        # 보안 그룹에 GitHub Actions IP 추가
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACCESS_KEY_SECRET }}
          AWS_DEFAULT_REGION: ap-northeast-2

      - name: Deploy to prod
        if: contains(github.ref, 'dev') || contains(github.ref, 'main')
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_NAME }}
          username: ${{ secrets.EC2_INSTANCE_USER_NAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: ${{ secrets.AWS_PORT }}
          # Docker 이미지 풀 및 컨테이너 배포 # 사용하지 않는 Docker 이미지 정리
          script: |
            docker pull ${{ secrets.DOCKER_USER }}/moayoeats:latest
            docker stop moayoeats
            docker rm moayoeats
            docker run -d --network moayoeats --name moayoeats -p 8080:8080 ${{ secrets.DOCKER_USER }}/moayoeats:latest
            
            if docker images -f "dangling=true" -q | grep . > /dev/null; then
              docker rmi $(docker images -f "dangling=true" -q)
            fi
          # 1. 도커 허브(Docker Hub)에서 이미지를 최신 버전으로 가져옵니다.
          # 2. 이미 실행 중인 도커 컨테이너를 중지합니다.
          # 3. 중지된 도커 컨테이너를 삭제합니다.
          # 4. 새로운 도커 컨테이너를 실행합니다.
          #    -d: 백그라운드에서 실행
          #    --network moayoeats: 'moayoeats'라는 이름의 도커 네트워크에 연결
          #    --name moayoeats: 컨테이너에 'moayoeats'라는 이름 부여
          #    -p 8080:8080: 호스트의 8080 포트와 컨테이너의 8080 포트를 매핑

      # 1. AWS 보안 그룹에서 GitHub Actions IP의 인바운드(Ingress) 규칙을 제거합니다.
      - name: Remove GitHub Actions IP from security group
        # 2. aws 명령어를 사용하여 보안 그룹에 대한 인바운드 규칙 제거 요청을 전송합니다.
        #    - group-name: 보안 그룹의 이름
        #    - protocol: 프로토콜 (여기서는 TCP)
        #    - port: 포트 번호 (여기서는 22번 포트, SSH)
        #    - cidr: GitHub Actions IP 주소 (이전 단계에서 가져옴)
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACCESS_KEY_SECRET }}
          AWS_DEFAULT_REGION: ap-northeast-2
